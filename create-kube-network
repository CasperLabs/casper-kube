#!/bin/bash
source ./shflags


docker_repository="878804750492.dkr.ecr.us-east-2.amazonaws.com"
build_bucket="builds.casperlabs.io"

kibana_filebeat_index="32f407c0-9755-11eb-9976-1debcb3b57c8"
kibana_host="kibana.test.k8s.casperlabs.io"

#./create-kube-network --node_count 10 \
#                      --node_cpu 2 \
#                      --node_mem 2Gi \
#                      --node_storage 10Gi \
#                      --genesis_in_seconds 300

############################################################################################
# opts
############################################################################################


DEFINE_string 'node_count' '7' 'node count' 't'
DEFINE_string 'node_version' '1_0_0' 'node version' 'n'
DEFINE_string 'node_port' '35000' 'node version' 'p'
DEFINE_string 'node_cpu' '500m' 'node cpu request' 'c'
DEFINE_string 'node_mem' '500Mi' 'node memory request' 'm'
DEFINE_string 'node_storage' '1Gi' 'node storage volume size' 's'
DEFINE_string 'genesis_in_seconds' '300' 'genesis start x seconds in the future' 'g'

# Parse the command-line.
FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"

echo "--------------------------------------------------"
echo "opts"
echo "--------------------------------------------------"

echo "node_count: ${FLAGS_node_count}"
echo "node_version: ${FLAGS_node_version}"
echo "node_port: ${FLAGS_node_port}"
echo "node_cpu: ${FLAGS_node_cpu}"
echo "node_mem: ${FLAGS_node_mem}"
echo "node_storage: ${FLAGS_node_storage}"
echo "genesis_in_seconds: ${FLAGS_genesis_in_seconds}"

node_count=$FLAGS_node_count
node_version=$FLAGS_node_version
node_port=$FLAGS_node_port
node_mem_limit=$FLAGS_node_mem
node_mem_request=$FLAGS_node_mem
node_cpu_limit=$FLAGS_node_cpu
node_cpu_request=$FLAGS_node_cpu
node_storage=$FLAGS_node_storage
genesis_in_seconds=$FLAGS_genesis_in_seconds

############################################################################################
# sanity checks 
############################################################################################

if ! which aws > /dev/null;
then
  echo "awscli utilities not installed"
  exit 1
fi

if ! aws sts get-caller-identity > /dev/null;
then
  echo "aws credentials not setup"
  exit 1
 fi

if ! which kubectl > /dev/null;
then
  echo "kubectl not installed"
  exit 1
fi

if ! kubectl get nodes > /dev/null;
then
  echo "kube auth not setup"
  exit 1
fi

# if [ ! -d "../casper-node" ];
# then
#   echo "missing ../casper-node ; casper-node must be checked out in parent directory"
#   exit 1
# fi

# if [ ! -f "../casper-node/target/release/casper-node" ];
# then
#   echo "build casper-node before running create-kube-network"
#   exit 1
# fi

# if [ ! -d "../casper-node-launcher" ];
# then
#   echo "missing ../casper-node-launcher ; casper-node-launcher must be checked out in parent directory"
#   exit 1
# fi

# if [ ! -f "../casper-node-launcher/target/release/casper-node-launcher" ];
# then
#   echo "build casper-node-launcher before running create-kube-network"
#   exit 1
# fi

############################################################################################
# uniquely name network
############################################################################################


git_hash=`cd ../casper-node/; git rev-parse --short HEAD` ||  echo "none"
user=`whoami`
random=`openssl rand -hex 2`
network_name="${user}-${random}"


############################################################################################
# generate casper-tool artifacts
############################################################################################

echo "--------------------------------------------------"
echo "running casper-tool:"
echo "./casper-tool.py create-network --genesis-in $genesis_in_seconds --hosts-file kube-hosts.yaml artifacts/$network_name"
echo "--------------------------------------------------"

./casper-tool.py --node-port $node_port collect-release --node-version $node_version artifacts/$network_name
./casper-tool.py --node-port $node_port create-network --node-version $node_version artifacts/$network_name
./casper-tool.py --node-port $node_port publish-network --node-version $node_version artifacts/$network_name --aws-profile casperlabs-default

# ############################################################################################
# # generate stests network artifacts
# # https://github.com/CasperLabs/stests/blob/master/docs/usage_lrt.md
# ############################################################################################

# cd artifacts/$network_name

# mkdir stests_net
# mkdir stests_net/configs
# mkdir stests_net/faucet
# mkdir stests_net/bin

# cp staging/config/chainspec.toml stests_net/
# cp staging/config/accounts.toml stests_net/
# cp staging/faucet/secret_key.pem stests_net/faucet
# cp staging/bin/casper-client stests_net/bin

# cd ./nodes
# for node in *;
# do
#         echo $node
#         mkdir -p ../stests_net/configs/$node
#         cp $node/etc/casper/keys/secret_key.pem ../stests_net/configs/$node/
# done

# cd ../../..


# ############################################################################################
# # sync artifacts to s3
# ############################################################################################

# echo "--------------------------------------------------"
# echo "uploading artifacts to s3"
# echo "--------------------------------------------------"

# aws s3 sync artifacts/$network_name s3://$build_bucket/networks/$network_name



############################################################################################
# create Kubernetes Resources
############################################################################################


kube_resources_yaml="./artifacts/${network_name}/kube_resources.yaml"

echo "--------------------------------------------------"
echo "Creating network in kube namespace $network_name"
echo "--------------------------------------------------"
echo ""
echo "Network Name: $network_name"
echo "Node Version: $node_version"
echo "Build git rev: $git_hash"
echo ""
echo "writing $kube_resources_yaml"

for index in $(seq 1 $node_count)
do

zero_pad_index=$(printf %03d $index)
node_label="casper-node-$zero_pad_index"

cat << EOF >> $kube_resources_yaml
#
# $node_label
#

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: $node_label-pv-claim
spec:
  storageClassName: gp2
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: $node_storage

---
kind: Service
apiVersion: v1
metadata:
  name: $node_label
spec:
  selector:
    app: $node_label
  ports:
    - name: rest
      protocol: TCP
      port: 8888
      targetPort: 8888
    - name: rpc
      protocol: TCP
      port: 7777
      targetPort: 7777
    - name: casper-node
      protocol: TCP
      port: $node_port
      targetPort: $node_port

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: "${node_label}"
  labels:
    app: $node_label
spec:
  replicas: 1
  selector:
    matchLabels:
      app: $node_label
  template:
    metadata:
      labels:
       app:  $node_label
    spec:
      containers:
        - name: $node_label

          image: "${docker_repository}/casper-kube-node"
          env:
          - name: CASPER_NODE_GIT_HASH
            value: "$git_hash"
          - name: CASPER_NODE_INDEX
            value: "$zero_pad_index"
          - name: NETWORK_NAME
            value: "$network_name"
          - name: CASPER_NODE_VERSION
            value: "$node_version"
          - name: RUST_LOG
            value: info
          - name: RUST_BACKTRACE
            value: "1"
          resources:
            limits:
              cpu: "$node_cpu_limit"
              memory: "$node_mem_limit"
            requests:
              cpu: "$node_cpu_request"
              memory: "$node_mem_request"
          volumeMounts:
          - mountPath: "/storage"
            name: $node_label-pv
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
      volumes:
        - name: $node_label-pv
          persistentVolumeClaim:
            claimName: $node_label-pv-claim


EOF

done

# cat << EOF >> $kube_resources_yaml

# ---
# kind: Pod
# apiVersion: v1
# metadata:
#   name: casper-util
# spec:
#   containers:
#   - image: "${docker_repository}/casper-kube-util"
#     env:
#     - name: CASPER_NODE_GIT_HASH
#       value: "$git_hash"
#     name: casper-util
#   restartPolicy: Always
# EOF

# cat << EOF >> $kube_resources_yaml

# ---
# kind: Pod
# apiVersion: v1
# metadata:
#   name: casper-stests
# spec:
#   containers:
#   - image: "${docker_repository}/casper-kube-stests"
#     env:
#     - name: CASPER_NODE_GIT_HASH
#       value: "$git_hash"
#     - name: NETWORK_NAME
#       value: "$network_name"            
#     name: casper-stests
#   restartPolicy: Always
# EOF

############################################################################################
# apply Kubernetes Resources
############################################################################################

kubectl create namespace $network_name
kubectl apply -n $network_name -f $kube_resources_yaml

echo ""
echo "Network creation complete."
echo ""

echo "Kibana Logs:"
echo ""
echo "http://$kibana_host/app/discover#/?_g=(filters:!(),refreshInterval:(pause:!t,value:0),time:(from:now-15m,to:now))&_a=(columns:!(kubernetes.container.name,message),filters:!(('\$state':(store:appState),meta:(alias:!n,disabled:!f,index:'$kibana_filebeat_index',key:kubernetes.namespace,negate:!f,params:(query:$network_name),type:phrase),query:(match_phrase:(kubernetes.namespace:$network_name)))),index:'$kibana_filebeat_index',interval:auto,query:(language:kuery,query:''),sort:!())"

