#!/bin/bash
source ./shflags

docker_repository="878804750492.dkr.ecr.us-east-2.amazonaws.com"
build_bucket="builds.casperlabs.io"

kibana_filebeat_index="32f407c0-9755-11eb-9976-1debcb3b57c8"
kibana_host="kibana.test.k8s.casperlabs.io"

############################################################################################
# opts
############################################################################################


DEFINE_string 'network_name_prefix' '' 'network_name_prefix' 'p'
DEFINE_string 'node_name_prefix' 'casper-node' 'node name' 'n'
DEFINE_string 'node_count' '5' 'node count' 't'
DEFINE_string 'bootstrap_node_count' '1' 'bootstrap node count' 'b'
DEFINE_string 'validator_node_count' '2' 'bootstrap node count' 'v'
DEFINE_string 'zero_weight_node_count' '2' 'bootstrap node count' 'z'
DEFINE_string 'node_cpu' '500m' 'node cpu request' 'c'
DEFINE_string 'node_mem' '500Mi' 'node memory request' 'm'
DEFINE_string 'node_storage' '1Gi' 'node storage volume size' 's'
DEFINE_string 'genesis_in_seconds' '300' 'genesis start x seconds in the future' 'g'

# Parse the command-line.
FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"

echo "--------------------------------------------------"
echo "opts"
echo "--------------------------------------------------"

echo "network_name_prefix: ${FLAGS_network_name_prefix}"
echo "node_name_prefix: ${FLAGS_node_name_prefix}"
echo "node_count: ${FLAGS_node_count}"
echo "bootstrap_node_count: ${FLAGS_bootstrap_node_count}"
echo "validator_node_count: ${FLAGS_validator_node_count}"
echo "zero_weight_node_count ${FLAGS_zero_weight_node_count}"
echo "node_cpu: ${FLAGS_node_cpu}"
echo "node_mem: ${FLAGS_node_mem}"
echo "node_storage: ${FLAGS_node_storage}"
echo "genesis_in_seconds: ${FLAGS_genesis_in_seconds}"

if [[ -z "${FLAGS_network_name_prefix}" ]]; then
  network_name_prefix="$(whoami)"
else
  network_name_prefix="${FLAGS_network_name_prefix}"
fi
node_name_prefix=$FLAGS_node_name_prefix
node_count=$FLAGS_node_count
bootstrap_node_count=$FLAGS_bootstrap_node_count
validator_node_count=$FLAGS_validator_node_count
zero_weight_node_count=$FLAGS_zero_weight_node_count
node_mem_limit=$FLAGS_node_mem
node_mem_request=$FLAGS_node_mem
node_cpu_limit=$FLAGS_node_cpu
node_cpu_request=$FLAGS_node_cpu
node_storage=$FLAGS_node_storage
genesis_in_seconds=$FLAGS_genesis_in_seconds

############################################################################################
# sanity checks
############################################################################################

if ! which aws > /dev/null;
then
  echo "awscli utilities not installed"
  exit 1
fi

if ! aws sts get-caller-identity > /dev/null;
then
  echo "aws credentials not setup"
  exit 1
 fi

if ! which kubectl > /dev/null;
then
  echo "kubectl not installed"
  exit 1
fi

if ! kubectl get nodes > /dev/null;
then
  echo "kube auth not setup"
  exit 1
fi

if [[ "$(kubectl config current-context)" != "eks_test" ]]; then
  >&2 echo "The eks_test context was not detected"
  >&2 echo "Aborting attempt to create the network..."
  exit 1
fi

if [ ! -d "../casper-node" ];
then
  echo "missing ../casper-node ; casper-node must be checked out in parent directory"
  exit 1
fi

if [ ! -f "../casper-node/target/release/casper-node" ];
then
  echo "build casper-node before running create-kube-network"
  exit 1
fi

if [ ! -d "../casper-node-launcher" ];
then
  echo "missing ../casper-node-launcher ; casper-node-launcher must be checked out in parent directory"
  exit 1
fi

if [ ! -f "../casper-node-launcher/target/release/casper-node-launcher" ];
then
  echo "build casper-node-launcher before running create-kube-network"
  exit 1
fi

############################################################################################
# uniquely name network
############################################################################################


git_hash=`cd ../casper-node/; git rev-parse --short HEAD`
random=`openssl rand -hex 2`
network_name="${network_name_prefix}-${git_hash}-${random}"

if [[ "$( kubectl get namespaces | grep -c "${network_name}")" -gt 0 ]]; then
  >&2 echo "There is already a namespace for the given network_name_prefix"
  >&2 echo "Aborting attempt to create the network..."
  exit 1
fi

############################################################################################
# generate casper-tool artifacts
############################################################################################

function generate_hosts_file() {
  local node_name_prefix="${1:-casper-node}"
  local nodes="${2:-5}"
  local bootstrap_nodes="${3}"
  local validator_nodes="${4}"
  local zero_weight_nodes="${5}"
  local remaining_nodes
  local calculated_sum_of_nodes

  if [[ -z "${bootstrap_nodes}" ]]; then
    echo "Setting the number of bootstrap_nodes to default of 1"
    bootstrap_nodes=1
  fi

  local remaining_nodes="$(("${nodes}"-"${bootstrap_nodes}"))"

  if [[ -z "${validator_nodes}" ]]; then
    local default_validator_nodes
    default_validator_nodes="$(("${remaining_nodes}"/2))"
    echo "Setting the number of validator_nodes to default of ${default_validator_nodes}"
    validator_nodes="${default_validator_nodes}"
  fi

  local remaining_nodes="$(("${nodes}"-"${validator_nodes}"-"${bootstrap_nodes}"))"

  if [[ -z "${zero_weight_nodes}" ]]; then
    zero_weight_nodes="${remaining_nodes}"
  fi

  calculated_sum_of_nodes="$(("${zero_weight_nodes}"+"${validator_nodes}"+"${bootstrap_nodes}"))"

  if [[ "${nodes}" != "${calculated_sum_of_nodes}" ]]; then
    >&2 echo "The total number of nodes must be equal to the calculated sum of nodes"
    exit 1
  fi

  cp "${PWD}"/kube-hosts.yaml.tpl "${PWD}"/kube-hosts.yaml

  local bootstrap_nodes_sequence_step
  local validator_nodes_sequence_step
  local zero_weight_sequence_step
  bootstrap_nodes_sequence_step="$(("${bootstrap_nodes}"-1))"
  validator_nodes_sequence_step="$(("${bootstrap_nodes_sequence_step}"+"${validator_nodes}"))"
  zero_weight_sequence_step="$(("${validator_nodes_sequence_step}"+"${zero_weight_nodes}"))"

  local bootstrap_node_type_args
  local validator_node_type_args
  local zero_weight_node_type_args
  local bootstrap_node_kv_args
  local validator_node_kv_args
  local zero_weight_node_kv_args

  for node_index in $(seq 0 "${bootstrap_nodes_sequence_step}"); do
    bootstrap_node_type_args="${bootstrap_node_type_args} -t string"
    bootstrap_node_kv_args="${bootstrap_node_kv_args} ${node_name_prefix}-${node_index}="
  done

  # shellcheck disable=2086
  dasel put object \
    -f "${PWD}"/kube-hosts.yaml \
    ${bootstrap_node_type_args} \
    -s "all.children.bootstrap.hosts" \
    ${bootstrap_node_kv_args}

  for node_index in $(seq "$((bootstrap_nodes_sequence_step+1))" "${validator_nodes_sequence_step}"); do
    validator_node_type_args="${validator_node_type_args} -t string"
    validator_node_kv_args="${validator_node_kv_args} ${node_name_prefix}-${node_index}="
  done

  # shellcheck disable=2086
  dasel put object \
    -f "${PWD}"/kube-hosts.yaml \
    ${validator_node_type_args} \
    -s "all.children.validators.hosts" \
    ${validator_node_kv_args}

  for node_index in $(seq "$((validator_nodes_sequence_step+1))" "${zero_weight_sequence_step}"); do
    zero_weight_node_type_args="${zero_weight_node_type_args} -t string"
    zero_weight_node_kv_args="${zero_weight_node_kv_args} ${node_name_prefix}-${node_index}="
  done

  # shellcheck disable=2086
  dasel put object \
    -f "${PWD}"/kube-hosts.yaml \
    ${zero_weight_node_type_args} \
    -s "all.children.zero_weight.hosts" \
    ${zero_weight_node_kv_args}
}


echo "--------------------------------------------------"
echo "Generating kube-hosts.yaml file"
echo """
generate_hosts_file \\
  \$node_name_prefix \\
  \$node_count \\
  \$bootstrap_node_count \\
  \$validator_node_count \\
  \$zero_weight_node_count
generate_hosts_file \
  $node_name_prefix \
  $node_count \
  $bootstrap_node_count \
  $validator_node_count \
  $zero_weight_node_count
"""

generate_hosts_file \
  "${node_name_prefix}" \
  "${node_count}" \
  "${bootstrap_node_count}" \
  "${validator_node_count}" \
  "${zero_weight_node_count}"

echo "--------------------------------------------------"
echo "Displaying the generated kube-hosts.yaml file"
cat "${PWD}"/kube-hosts.yaml

echo "--------------------------------------------------"
echo "running casper-tool:"
echo """
./casper-tool.py create-network
  --genesis-in $genesis_in_seconds
  --hosts-file kube-hosts.yaml
  artifacts/$network_name
"""
echo "--------------------------------------------------"

./casper-tool.py create-network \
  --genesis-in "${genesis_in_seconds}" \
  --hosts-file kube-hosts.yaml \
  artifacts/"${network_name}"

############################################################################################
# generate stests network artifacts
# https://github.com/CasperLabs/stests/blob/master/docs/usage_lrt.md
############################################################################################

cd artifacts/$network_name

mkdir stests_net
mkdir stests_net/configs
mkdir stests_net/faucet
mkdir stests_net/bin

cp staging/config/chainspec.toml stests_net/
cp staging/config/accounts.toml stests_net/
cp staging/faucet/secret_key.pem stests_net/faucet
cp staging/bin/casper-client stests_net/bin

cd ./nodes
for node in *;
do
        echo $node
        mkdir -p ../stests_net/configs/$node
        cp $node/etc/casper/keys/secret_key.pem ../stests_net/configs/$node/
done

cd ../../..


############################################################################################
# sync artifacts to s3
############################################################################################

echo "--------------------------------------------------"
echo "uploading artifacts to s3"
echo "--------------------------------------------------"

aws s3 sync artifacts/$network_name s3://$build_bucket/networks/$network_name



############################################################################################
# create Kubernetes Resources
############################################################################################


kube_resources_yaml="./artifacts/${network_name}/kube_resources.yaml"

echo "--------------------------------------------------"
echo "Creating network in kube namespace $network_name"
echo "--------------------------------------------------"
echo ""
echo "Network Name: $network_name"
echo "Build git rev: $git_hash"
echo ""
echo "writing $kube_resources_yaml"

for index in $(seq 0 $(($node_count-1)))
do

node_index=$(printf %d $index)
node_label="${node_name_prefix}-${index}"

cat << EOF >> $kube_resources_yaml
#
# $node_label
#

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: $node_label-pv-claim
spec:
  storageClassName: gp2
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: $node_storage

---
kind: Service
apiVersion: v1
metadata:
  name: $node_label
spec:
  selector:
    app: $node_label
  ports:
    - name: rest
      protocol: TCP
      port: 8888
      targetPort: 8888
    - name: rpc
      protocol: TCP
      port: 7777
      targetPort: 7777
    - name: casper-node
      protocol: TCP
      port: 34553
      targetPort: 34553

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: "${node_label}"
  labels:
    app: $node_label
spec:
  replicas: 1
  selector:
    matchLabels:
      app: $node_label
  template:
    metadata:
      labels:
       app:  $node_label
    spec:
      containers:
        - name: $node_label

          image: "${docker_repository}/casper-kube-node"
          env:
          - name: CASPER_NODE_GIT_HASH
            value: "$git_hash"
          - name: CASPER_NODE_INDEX
            value: "$node_index"
          - name: NETWORK_NAME
            value: "$network_name"
          - name: RUST_LOG
            value: info
          - name: RUST_BACKTRACE
            value: "1"
          resources:
            limits:
              cpu: "$node_cpu_limit"
              memory: "$node_mem_limit"
            requests:
              cpu: "$node_cpu_request"
              memory: "$node_mem_request"
          volumeMounts:
          - mountPath: "/storage"
            name: $node_label-pv
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
      volumes:
        - name: $node_label-pv
          persistentVolumeClaim:
            claimName: $node_label-pv-claim


EOF

done

cat << EOF >> $kube_resources_yaml

---
kind: Pod
apiVersion: v1
metadata:
  name: casper-util
spec:
  containers:
  - image: "${docker_repository}/casper-kube-util"
    env:
    - name: CASPER_NODE_GIT_HASH
      value: "$git_hash"
    name: casper-util
  restartPolicy: Always
EOF

cat << EOF >> $kube_resources_yaml

---
kind: Pod
apiVersion: v1
metadata:
  name: casper-stests
spec:
  containers:
  - image: "${docker_repository}/casper-kube-stests"
    env:
    - name: CASPER_NODE_GIT_HASH
      value: "$git_hash"
    - name: NETWORK_NAME
      value: "$network_name"
    name: casper-stests
  restartPolicy: Always
EOF

############################################################################################
# apply Kubernetes Resources
############################################################################################

kubectl create namespace $network_name
kubectl apply -n $network_name -f $kube_resources_yaml

echo ""
echo "Network creation complete."
echo ""

echo "Kibana Logs:"
echo ""
echo "http://$kibana_host/app/discover#/?_g=(filters:!(),refreshInterval:(pause:!t,value:0),time:(from:now-15m,to:now))&_a=(columns:!(kubernetes.container.name,message),filters:!(('\$state':(store:appState),meta:(alias:!n,disabled:!f,index:'$kibana_filebeat_index',key:kubernetes.namespace,negate:!f,params:(query:$network_name),type:phrase),query:(match_phrase:(kubernetes.namespace:$network_name)))),index:'$kibana_filebeat_index',interval:auto,query:(language:kuery,query:''),sort:!())"

