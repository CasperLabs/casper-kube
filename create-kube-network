#!/usr/bin/env bash

# shellcheck disable=1091
source "scripts/shflags"

# shellcheck disable=2034
HELM_CHART_NAME=casper-kube

DEFINE_string 'bootstrap_node_count' '1' 'bootstrap node count' ''
DEFINE_string 'development_mode' 'true' 'whether to upload the network artifacts to k8s from local' ''
DEFINE_string 'genesis_in_seconds' '300' 'genesis start x seconds in the future' ''
DEFINE_string 'image_tag' 'latest' 'image_tag' ''
DEFINE_string 'network_name_prefix' '' 'network_name_prefix' ''
DEFINE_string 'node_name_prefix' 'casper-node' 'node name' ''
DEFINE_string 'node_count' '5' 'node count' ''
DEFINE_string 'node_cpu' '500m' 'node cpu request' ''
DEFINE_string 'node_mem' '500Mi' 'node memory request' ''
DEFINE_string 'node_storage_capacity' '1Gi' 'node storage volume size' ''
DEFINE_string 'rwo_storage_class' 'gp2' 'name of the readwriteone storage class to use' ''
DEFINE_string 'rwm_storage_class' 'nfs' 'name of the readwritemany storage class to use' ''
DEFINE_string 'validator_node_count' '1' 'validator node count' ''
DEFINE_string 'zero_weight_node_count' '1' 'zero weight node count' ''

# Parse the command-line.
FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"

echo "--------------------------------------------------"
echo "opts"
echo "--------------------------------------------------"

BOOTSTRAP_NODE_COUNT=$FLAGS_bootstrap_node_count
DEVELOPMENT_MODE=${FLAGS_development_mode}
GENESIS_IN_SECONDS=$FLAGS_genesis_in_seconds
IMAGE_TAG=$FLAGS_image_tag
if [[ -z "${FLAGS_network_name_prefix}" ]]; then
  NETWORK_NAME_PREFIX="$(whoami)"
else
  NETWORK_NAME_PREFIX="${FLAGS_network_name_prefix}"
fi
NODE_NAME_PREFIX=$FLAGS_node_name_prefix
NODE_COUNT=$FLAGS_node_count
NODE_MEM_LIMIT=$FLAGS_node_mem
NODE_CPU_LIMIT=$FLAGS_node_cpu
NODE_STORAGE_CAPACITY=$FLAGS_node_storage_capacity
RWO_STORAGE_CLASS=$FLAGS_rwo_storage_class
RWM_STORAGE_CLASS=$FLAGS_rwm_storage_class
VALIDATOR_NODE_COUNT=$FLAGS_validator_node_count
ZERO_WEIGHT_NODE_COUNT=$FLAGS_zero_weight_node_count

echo "BOOTSTRAP_NODE_COUNT: ${BOOTSTRAP_NODE_COUNT}"
echo "DEVELOPMENT_MODE: ${DEVELOPMENT_MODE}"
echo "GENESIS_IN_SECONDS: ${GENESIS_IN_SECONDS}"
echo "IMAGE_TAG: ${IMAGE_TAG}"
echo "NETWORK_NAME_PREFIX: ${NETWORK_NAME_PREFIX}"
echo "NODE_NAME_PREFIX: ${NODE_NAME_PREFIX}"
echo "NODE_COUNT: ${NODE_COUNT}"
echo "NODE_MEM_LIMIT: ${NODE_MEM_LIMIT}"
echo "NODE_CPU_LIMIT: ${NODE_CPU_LIMIT}"
echo "NODE_STORAGE_CAPACITY: ${NODE_STORAGE_CAPACITY}"
echo "RWO_STORAGE_CLASS: ${RWO_STORAGE_CLASS}"
echo "RWM_STORAGE_CLASS: ${RWM_STORAGE_CLASS}"
echo "VALIDATOR_NODE_COUNT: ${VALIDATOR_NODE_COUNT}"
echo "ZERO_WEIGHT_NODE_COUNT ${ZERO_WEIGHT_NODE_COUNT}"

sleep 3s

# Validate all required variables and tools are present
source "${PWD}"/scripts/validations.sh \
  "${BOOTSTRAP_NODE_COUNT}" \
  "${DEVELOPMENT_MODE}" \
  "${GENESIS_IN_SECONDS}" \
  "${IMAGE_TAG}" \
  "${NETWORK_NAME_PREFIX}" \
  "${NODE_NAME_PREFIX}" \
  "${NODE_COUNT}" \
  "${NODE_MEM_LIMIT}" \
  "${NODE_CPU_LIMIT}" \
  "${NODE_STORAGE_CAPACITY}" \
  "${RWO_STORAGE_CLASS}" \
  "${RWM_STORAGE_CLASS}"

# Create name for the network
source "${PWD}"/scripts/set_network_name.sh \
  "${NETWORK_NAME_PREFIX}"

# Generate hosts file locally
source "${PWD}"/scripts/generate_hosts_file.sh \
  "${NODE_NAME_PREFIX}" \
  "${NODE_COUNT}" \
  "${BOOTSTRAP_NODE_COUNT}" \
  "${VALIDATOR_NODE_COUNT}" \
  "${ZERO_WEIGHT_NODE_COUNT}"

# Generate network artifacts locally
source "${PWD}"/scripts/generate_network_artifacts.sh \
  "${GENESIS_IN_SECONDS}" \
  "${NETWORK_NAME}"

# Starts attempting to upload artifacts in the background in dev mode
source "${PWD}"/scripts/upload_artifacts.sh \
  "${NETWORK_NAME}" \
  "${NODE_NAME_PREFIX}" \
  "${HELM_CHART_NAME}" \
  &

# Deploy the network with a statefulset helm chart
source "${PWD}"/scripts/deploy.sh \
  "${NETWORK_NAME}" \
  "${NODE_NAME_PREFIX}" \
  "${DEVELOPMENT_MODE}" \
  "${NODE_COUNT}" \
  "${NODE_STORAGE_CAPACITY}" \
  "${RWO_STORAGE_CLASS}" \
  "${RWM_STORAGE_CLASS}" \
  "${NODE_MEM_LIMIT}" \
  "${NODE_CPU_LIMIT}" \
  "${IMAGE_TAG}"