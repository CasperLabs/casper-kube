#!/bin/bash
source ./shflags


docker_repository="878804750492.dkr.ecr.us-east-2.amazonaws.com"
build_bucket="builds.casperlabs.io"

kibana_filebeat_index="32f407c0-9755-11eb-9976-1debcb3b57c8"
kibana_host="kibana.test.k8s.casperlabs.io"

#./create-kube-network --node_count 10 \
#                      --node_cpu 2 \
#                      --node_mem 2Gi \
#                      --node_storage 10Gi \
#                      --genesis_in_seconds 300

############################################################################################
# opts
############################################################################################


DEFINE_string 'node_count' '7' 'node count' 't'
DEFINE_string 'node_version' '1_0_0' 'node version' 'n'
DEFINE_string 'node_port' '35000' 'node version' 'p'
DEFINE_string 'node_cpu' '500m' 'node cpu request' 'c'
DEFINE_string 'node_mem' '500Mi' 'node memory request' 'm'
DEFINE_string 'node_storage' '1Gi' 'node storage volume size' 's'
DEFINE_string 'genesis_in_seconds' '300' 'genesis start x seconds in the future' 'g'
DEFINE_string 'username' '$(whoami)' 'username' 'u'
DEFINE_string 'kubeconfig' '${HOME}/.kube/config' 'kubeconfig' 'k'
DEFINE_string 'aws_profile' 'default' 'aws profile' 'a'
DEFINE_string 'network_name' 'default' 'network name' 'N'
DEFINE_string 'validator_node_count' '5' 'Count of Validator Nodes' 'V'
DEFINE_string 'non_validator_node_count' '2' 'Count of Non Validator Nodes' 'P'



# Parse the command-line.
FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"

echo "--------------------------------------------------"
echo "opts"
echo "--------------------------------------------------"

echo "node_count: ${FLAGS_node_count}"
echo "node_version: ${FLAGS_node_version}"
echo "node_port: ${FLAGS_node_port}"
echo "node_cpu: ${FLAGS_node_cpu}"
echo "node_mem: ${FLAGS_node_mem}"
echo "node_storage: ${FLAGS_node_storage}"
echo "genesis_in_seconds: ${FLAGS_genesis_in_seconds}"
echo "username: ${FLAGS_username}"
echo "kubeconfig: ${FLAGS_kubeconfig}"
echo "aws_profile: ${FLAGS_aws_profile}"
echo "network_name: ${FLAGS_network_name}"
echo "validator_node_count: ${FLAGS_validator_node_count}"
echo "non_validator_node_count: ${FLAGS_non_validator_node_count}"


node_count=$FLAGS_node_count
node_version=$FLAGS_node_version
node_port=$FLAGS_node_port
node_mem_limit=$FLAGS_node_mem
node_mem_request=$FLAGS_node_mem
node_cpu_limit=$FLAGS_node_cpu
node_cpu_request=$FLAGS_node_cpu
node_storage=$FLAGS_node_storage
genesis_in_seconds=$FLAGS_genesis_in_seconds
username=${FLAGS_username}
kubeconfig=${FLAGS_kubeconfig}
aws_profile=${FLAGS_aws_profile}
network_name=${FLAGS_network_name}
validator_node_count=${FLAGS_validator_node_count}
non_validator_node_count=${FLAGS_non_validator_node_count}


export KUBECONFIG=${kubeconfig}


############################################################################################
# sanity checks 
############################################################################################

if ! which aws > /dev/null;
then
  echo "awscli utilities not installed"
  exit 1
fi

if ! aws sts get-caller-identity > /dev/null;
then
  echo "aws credentials not setup"
  exit 1
fi

if ! which kubectl > /dev/null;
then
  echo "kubectl not installed"
  exit 1
fi

if ! kubectl get nodes > /dev/null;
then
  echo "kube auth not setup"
  exit 1
fi

############################################################################################
# download casper-client
############################################################################################
echo "get latest version from s3"

latest_casper_client_version=$(aws s3 ls s3://repo.casperlabs.io/releases/pool/main/c/casper-client/ | sort | tail -1 | awk '{print $4}')

echo ${latest_casper_client_version}

aws s3 cp s3://repo.casperlabs.io/releases/pool/main/c/casper-client/${latest_casper_client_version} .

dpkg -x ${latest_casper_client_version} .

if [ $? -ne 0 ]; then
  echo "error installing casper client"
  exit 1
fi

############################################################################################
# uniquely name network
############################################################################################
# check if provided namespace already exists
function check_namespace() {
    namespace=$1
    kubectl get ns | grep ${namespace}

    if [ $? -ne 0 ]; then
        echo "Namespace does not exists"
        return 1
    fi
    echo "Provided namespace already exists"
    return 0
}

user=${username}
random=`openssl rand -hex 2`
if [[ "${network_name}" == "default" ]] || check_namespace ${network_name}; then
    network_name="${user}-${random}"
fi

############################################################################################
# generate casper-tool artifacts
############################################################################################

echo "--------------------------------------------------"
echo "running casper-tool:"
echo "./casper-tool.py --node-port ${node_port} collect-release --node-version ${node_version} artifacts/${network_name}"
echo "--------------------------------------------------"

./casper-tool.py --node-port ${node_port} --validator-count ${validator_node_count} --non-validator-count ${non_validator_node_count} collect-release --node-version ${node_version} artifacts/${network_name}
./casper-tool.py --node-port ${node_port} --validator-count ${validator_node_count} --non-validator-count ${non_validator_node_count} create-network --node-version ${node_version} artifacts/${network_name}
./casper-tool.py --node-port ${node_port} --validator-count ${validator_node_count} --non-validator-count ${non_validator_node_count} publish-network --node-version ${node_version} artifacts/${network_name} --aws-profile ${aws_profile}


############################################################################################
# create Kubernetes Resources
############################################################################################


kube_resources_yaml="./artifacts/${network_name}/kube_resources.yaml"

echo "--------------------------------------------------"
echo "Creating network in kube namespace $network_name"
echo "--------------------------------------------------"
echo ""
echo "Network Name: $network_name"
echo "Node Version: $node_version"
echo "Build git rev: $git_hash"
echo ""
echo "writing $kube_resources_yaml"

for index in $(seq 1 $node_count)
do

zero_pad_index=$(printf %03d $index)
node_label="casper-node-$zero_pad_index"

cat << EOF >> $kube_resources_yaml
#
# $node_label
#

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: $node_label-pv-claim
spec:
  storageClassName: gp2
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: $node_storage

---
kind: Service
apiVersion: v1
metadata:
  name: $node_label
spec:
  selector:
    app: $node_label
  ports:
    - name: rest
      protocol: TCP
      port: 8888
      targetPort: 8888
    - name: rpc
      protocol: TCP
      port: 7777
      targetPort: 7777
    - name: casper-node
      protocol: TCP
      port: $node_port
      targetPort: $node_port

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: "${node_label}"
  labels:
    app: $node_label
spec:
  replicas: 1
  selector:
    matchLabels:
      app: $node_label
  template:
    metadata:
      labels:
       app:  $node_label
    spec:
      containers:
        - name: $node_label

          image: "${docker_repository}/casper-kube-node"
          env:
          - name: CASPER_NODE_GIT_HASH
            value: "$git_hash"
          - name: CASPER_NODE_INDEX
            value: "$zero_pad_index"
          - name: NETWORK_NAME
            value: "$network_name"
          - name: CASPER_NODE_VERSION
            value: "$node_version"
          - name: RUST_LOG
            value: info
          - name: RUST_BACKTRACE
            value: "1"
          resources:
            limits:
              cpu: "$node_cpu_limit"
              memory: "$node_mem_limit"
            requests:
              cpu: "$node_cpu_request"
              memory: "$node_mem_request"
          volumeMounts:
          - mountPath: "/storage"
            name: $node_label-pv
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
      volumes:
        - name: $node_label-pv
          persistentVolumeClaim:
            claimName: $node_label-pv-claim


EOF

done

cat << EOF >> $kube_resources_yaml

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: casper-ingress
spec:
  rules:
EOF

for index in $(seq 1 $node_count)
do

zero_pad_index=$(printf %03d $index)
node_label="casper-node-$zero_pad_index"

cat << EOF >> $kube_resources_yaml
  - host: $node_label.k8s.srtip.casperlabs.io
    http:
      paths:
      - path: /status
        backend:
          serviceName: $node_label
          servicePort: 8888
      - path: /rpc
        backend:
          serviceName: $node_label
          servicePort: 7777
      - path: /events
        backend:
          serviceName: $node_label
          servicePort: 9999
EOF

done

############################################################################################
# apply Kubernetes Resources
############################################################################################

kubectl create namespace $network_name
kubectl apply -n $network_name -f $kube_resources_yaml

echo ""
echo "Network creation complete."
echo ""

echo "Kibana Logs:"
echo ""
echo "http://$kibana_host/app/discover#/?_g=(filters:!(),refreshInterval:(pause:!t,value:0),time:(from:now-15m,to:now))&_a=(columns:!(kubernetes.container.name,message),filters:!(('\$state':(store:appState),meta:(alias:!n,disabled:!f,index:'$kibana_filebeat_index',key:kubernetes.namespace,negate:!f,params:(query:$network_name),type:phrase),query:(match_phrase:(kubernetes.namespace:$network_name)))),index:'$kibana_filebeat_index',interval:auto,query:(language:kuery,query:''),sort:!())"

echo "$network_name"